circ.lm$coefficients
circ.lm <- lm.circular(y, y, order=2)
circ.lm <- lm.circular(y, y, order=2)
circ.lm$coefficients
circ.lm$message
circ.lm$p.values
circ.lm <- lm.circular(y, y, order=0)
circ.lm$p.values
# Specify the file path where the CSV is saved
csv_file_path <- 'independent_angle.csv'
# Read the CSV file with one column and no header
x <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angle.csv'
# Read the CSV file with one column and no header
y <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
circ.lm <- lm.circular(y, x, order=2)
circ.lm$p.values
circ.lm$coefficients
circ.lm <- lm.circular(y, x, order=1)
circ.lm$coefficients
circ.lm$p.values
circ.lm <- lm.circular(x, y, order=1)
circ.lm$p.values
circ.lm$coefficients
circ.lm <- lm.circular(x, y, order=1, type = "c-c")
circ.lm$coefficients
circ.lm$p.values
circ.lm <- lm.circular(x, y, order=1, type = "c-c", signif.stars = TRUE
)
circ.lm <- lm.circular(x, y, order=1, type = "c-c", signif.stars = TRUE)
# Specify the file path where the CSV is saved
csv_file_path <- 'independent_angle.csv'
# Read the CSV file with one column and no header
x <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angle.csv'
# Read the CSV file with one column and no header
y <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'independent_angle.csv'
# Read the CSV file with one column and no header
x <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angle.csv'
# Read the CSV file with one column and no header
y <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
circ.lm <- lm.circular(y, x, order=1, type = "c-c")
circ.lm$p.values
plot.default(x, y, pch = 16, cex = 0.8, aspect = 1, main = "Circular-Circular Regression", xlab = "X", ylab = "Y")
lines(x[order(x)], circ.lm$fitted[order(x)], col = "red", type = 'l')
circ.lm <- lm.circular(y, x, order=1, type = "c-c", level = 0.05)
circ.lm$message
circ.lm <- lm.circular(y, x, order=2, type = "c-c", level = 0.05)
circ.lm$p.values
# Specify the file path where the CSV is saved
csv_file_path <- 'independent_angle.csv'
# Read the CSV file with one column and no header
x <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angle.csv'
# Read the CSV file with one column and no header
y <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'independent_angle.csv'
# Read the CSV file with one column and no header
x <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angle.csv'
# Read the CSV file with one column and no header
y <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
circ.lm <- lm.circular(y, x, order=2, type = "c-c", level = 0.05)
circ.lm$p.values
circ.lm$message
circ.lm <- lm.circular(y, x, order=3, type = "c-c", level = 0.05)
circ.lm$message
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=1, type = "c-c", level = 0.05)
circ.lm$p.values
circ.lm$coefficients
plot.default(x, y, pch = 16, cex = 0.8, aspect = 1, main = "Circular-Circular Regression", xlab = "X", ylab = "Y")
lines(x[order(x)], circ.lm$fitted[order(x)], col = "red", type = 'l')
# Specify the file path where the CSV is saved
csv_file_path <- 'independent_angle.csv'
# Read the CSV file with one column and no header
x <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angle.csv'
# Read the CSV file with one column and no header
y <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
circ.lm <- lm.circular(y, x, order=1, type = "c-c", level = 0.05)
plot.default(x, y, pch = 16, cex = 0.8, aspect = 1, main = "Circular-Circular Regression", xlab = "X", ylab = "Y")
lines(x[order(x)], circ.lm$fitted[order(x)], col = "red", type = 'l')
circ.lm$p.values
summary(circ.lm)
circ.lm$p.values
circ.lm$message
circ.lm <- lm.circular(y, x, order=2, type = "c-c", level = 0.05)
circ.lm$message
circ.lm$p.values
circ.lm$p.values
circ.lm$coefficients
plot.default(x, y, pch = 16, cex = 0.8, aspect = 1, main = "Circular-Circular Regression", xlab = "X", ylab = "Y")
lines(x[order(x)], circ.lm$fitted[order(x)], col = "red", type = 'l')
plot.default(x, y, pch = 16, cex = 0.8, aspect = 1, main = "Circular-Circular Regression", xlab = "X", ylab = "Y")
lines(x[order(x)], circ.lm$fitted[order(x)], col = "red", type = 'l')
# Set the seed for reproducibility
set.seed(123)
# Generate 1000 random angles in radians
random_angles <- runif(1000, 0, 2 * pi)
# Set coefficients for first and second-order terms
a1 <- 2
b1 <- -1
a2 <- 0.5
b2 <- 1
# Compute the trigonometric polynomial of first and second order
trig_polynomial_first_order <- a1 * sin(random_angles) + b1 * cos(random_angles)
trig_polynomial_second_order <- a2 * sin(random_angles)^2 + b2 * cos(random_angles)^2
circ.lm <- lm.circular(y = trig_polynomial_first_order, random_angles, order=1, type = "c-c", level = 0.05)
circ.lm$coefficients
circ.lm <- lm.circular(y = trig_polynomial_first_order, random_angles, order=1, type = "c-c", level = 0.05, verbose = TRUE)
circ.lm <- lm.circular(y = trig_polynomial_first_order, random_angles, order=1, type = "c-c", level = 0.05)
circ.lm$p.values
circ.lm <- lm.circular(y = trig_polynomial_first_order, random_angles, order=1, type = "c-c", level = 0.05, init = c(1,1)
)
circ.lm$message
circ.lm <- lm.circular(y = trig_polynomial_second_order, random_angles, order=1, type = "c-c", level = 0.05)
circ.lm$message
circ.lm$message
circ.lm$p.values
circ.lm$coefficients
# Set the seed for reproducibility
set.seed(123)
# Generate 1000 random angles in radians
random_angles <- runif(1000, 0, 2 * pi)
# Set coefficients for first and second-order terms
a1 <- 1
b1 <- 1
a2 <- 0
b2 <- 0
# Compute the trigonometric polynomial of first and second order
trig_polynomial_first_order <- a1 * sin(random_angles) + b1 * cos(random_angles)
trig_polynomial_second_order <- a1 * sin(random_angles) + b1 * cos(random_angles) + a2 * sin(random_angles)^2 + b2 * cos(random_angles)^2
circ.lm <- lm.circular(y = trig_polynomial_first_order, random_angles, order=1, type = "c-c", level = 0.05)
circ.lm$coefficients
# Set the seed for reproducibility
set.seed(123)
# Generate 1000 random angles in radians
random_angles <- runif(1000, 0, 2 * pi)
# Set coefficients for first and second-order terms
a1 <- 1
b1 <- 1
a2 <- 0
b2 <- 0
# Compute the trigonometric polynomial of first and second order
trig_polynomial_first_order <- a1 * sin(random_angles) + b1 * cos(random_angles)
trig_polynomial_second_order <- a1 * sin(random_angles) + b1 * cos(random_angles) + a2 * sin(random_angles)^2 + b2 * cos(random_angles)^2
# Set the seed for reproducibility
set.seed(123)
# Generate 1000 random angles in radians
random_angles <- runif(1000, 0, 2 * pi)
# Set coefficients for first and second-order terms
c <- 0
a1 <- 1
b1 <- 1
a2 <- 0
b2 <- 0
# Compute the trigonometric polynomial of first and second order
trig_polynomial_first_order <- c +a1 * sin(random_angles) + b1 * cos(random_angles)
trig_polynomial_second_order <- c +a1 * sin(random_angles) + b1 * cos(random_angles) + a2 * sin(random_angles)^2 + b2 * cos(random_angles)^2
circ.lm <- lm.circular(y = trig_polynomial_first_order, random_angles, order=1, type = "c-c", level = 0.05)
circ.lm$coefficients
plot.default(random_angles, trig_polynomial_first_order, pch = 16, cex = 0.8, aspect = 1, main = "Circular-Circular Regression", xlab = "X", ylab = "Y")
lines(x[order(random_angles)], circ.lm$fitted[order(x)], col = "red", type = 'l')
plot.default(random_angles, trig_polynomial_first_order, pch = 16, cex = 0.8, aspect = 1, main = "Circular-Circular Regression", xlab = "X", ylab = "Y")
lines(x[order(random_angles)], circ.lm$fitted[order(random_angles)], col = "red", type = 'l')
plot.default(random_angles, trig_polynomial_first_order, pch = 16, cex = 0.8, aspect = 1, main = "Circular-Circular Regression", xlab = "X", ylab = "Y")
lines(random_angles[order(random_angles)], circ.lm$fitted[order(random_angles)], col = "red", type = 'l')
circ.lm <- lm.circular(y = trig_polynomial_first_order, random_angles, order=1, type = "c-c", level = 0.05, init=c(1,1))
circ.lm <- lm.circular(y = trig_polynomial_first_order, random_angles, order=1, type = "c-c", level = 0.05, init=c(1,1), verbose = TRUE
)
circ.lm <- lm.circular(, init=c(1,1), verbose = TRUE,y = trig_polynomial_first_order, random_angles, order=1, type = "c-c", level = 0.05)
circ.lm$fitted
lines(random_angles[order(random_angles)], circ.lm$fitted[order(random_angles)], col = "red", type = 'l')
lines(random_angles[order(random_angles)], circ.lm$fitted[order(random_angles)], col = "red", type = 'l')
plot.default(random_angles[order(random_angles)], circ.lm$fitted[order(random_angles)], col = "red", type = 'l')
# Generate a data set of dependent circular variables.
x <- circular(runif(50, 0, 2*pi))
y <- atan2(0.15*cos(x) + 0.25*sin(x), 0.35*sin(x)) +
rvonmises(n=50, mu=circular(0), kappa=5)
# Fit a circular-circular regression model.
circ.lm <- lm.circular(y, x, order=1)
# Obtain a crude plot of the data and fitted regression line.
plot.default(x, y)
circ.lm$fitted[circ.lm$fitted>pi] <- circ.lm$fitted[circ.lm$fitted>pi] - 2*pi
points.default(x[order(x)], circ.lm$fitted[order(x)], type='l')
circ.lm$coefficients
circ.lm$p.vaklues
circ.lm$p.values
# Generate a data set of dependent circular variables.
x <- circular(runif(50, 0, 2*pi))
y <- atan2(0.15*cos(x) + 0.25*sin(x), 0.35*sin(x)) +
rvonmises(n=50, mu=circular(0), kappa=5)
# Fit a circular-circular regression model.
circ.lm <- lm.circular(y, x, order=1)
# Obtain a crude plot of the data and fitted regression line.
plot.default(x, y)
circ.lm$fitted[circ.lm$fitted>pi] <- circ.lm$fitted[circ.lm$fitted>pi] - 2*pi
points.default(x[order(x)], circ.lm$fitted[order(x)], type='l')
# Generate a data set of dependent circular variables.
x <- circular(runif(50, 0, 2*pi))
y <- atan2(0.15*cos(x) + 0.25*sin(x), 0.35*sin(x)) +
rvonmises(n=50, mu=circular(0), kappa=5)
# Fit a circular-circular regression model.
circ.lm <- lm.circular(y, x, order=1)
# Obtain a crude plot of the data and fitted regression line.
plot.default(x, y)
circ.lm$fitted[circ.lm$fitted>pi] <- circ.lm$fitted[circ.lm$fitted>pi] - 2*pi
points.default(x[order(x)], circ.lm$fitted[order(x)], type='l')
circ.lm$coefficients
circ.lm <- lm.circular(y, x, order=1)
circ.lm$p.values
circ.lm$coefficients
circ.lm <- lm.circular(y, x, order=1, level = 0.0001)
circ.lm$coefficients
circ.lm$p.values
circ.lm$message
# Function to calculate cosine and sine vectors of a vector of angles in radians
calculate_cosine_sine_vectors <- function(angles_radians) {
# Calculate cosine and sine vectors
cosine_values <- cos(angles_radians)
sine_values <- sin(angles_radians)
# Return the result as a list
result_list <- list(cosine = cosine_values, sine = sine_values)
# Return the result
return(result_list)
}
# Example usage:
# Replace c(0, pi/4, pi/2) with your vector of angles in radians
angles_vector <- c(0, pi/4, pi/2)
result <- calculate_cosine_sine_vectors(angles_vector)
# Access cosine and sine vectors from the result
cosine_vector <- result$cosine
sine_vector <- result$sine
# Print the result
print("Cosine Vector:")
print(cosine_vector)
print("Sine Vector:")
print(sine_vector)
# Specify the file path where the CSV is saved
csv_file_path <- 'independent_angle.csv'
# Read the CSV file with one column and no header
x <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angle.csv'
# Read the CSV file with one column and no header
y <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'independent_angle.csv'
# Read the CSV file with one column and no header
x <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angle.csv'
# Read the CSV file with one column and no header
y <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
circ.lm <- lm.circular(y, x, order=1, level = 0.001)
circ.lm$p.values
circ.lm$message
circ.lm <- lm.circular(y, x, order=2, level = 0.001)
circ.lm$message
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=3, level = 0.001)
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=10, level = 0.001)
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=1, level = 0.001, circle.control = list())
circ.lm <- lm.circular(y, x, order=1, level = 0.001)
circ.lm$p.values
circ.lm$message
circ.lm <- lm.circular(y, x, order=2, level = 0.001)
circ.lm <- lm.circular(y, x, order=1, level = 0.001)
circ.lm$coefficients()
circ.lm$coefficients
circ.lm <- lm.circular(y, x, order=2, level = 0.001)
circ.lm$coefficients
circ.lm <- lm.circular(y, x, order=1, level = 0.05)
circ.lm$message
circ.lm <- lm.circular(y, x, order=1, level = 0.05, control.circular = list())
circ.lm$message
circ.lm$coefficients
# Specify the file path where the CSV is saved
csv_file_path <- 'independent_angle.csv'
# Read the CSV file with one column and no header
x <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angle.csv'
# Read the CSV file with one column and no header
y <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
circ.lm <- lm.circular(y, x, order=1, level = 0.05, control.circular = list())
circ.lm$coefficients
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=2, level = 0.05, control.circular = list())
circ.lm$p.values
circ.lm$coefficients
circ.lm <- lm.circular(y, x, order=3, level = 0.05, control.circular = list())
circ.lm$coefficients
circ.lm$coefficients
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=4, level = 0.05, control.circular = list())
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=5, level = 0.05, control.circular = list())
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=6, level = 0.05, control.circular = list())
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=7, level = 0.05, control.circular = list())
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=8, level = 0.05, control.circular = list())
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=5, level = 0.05, control.circular = list())
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=4, level = 0.05, control.circular = list())
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=1, level = 0.05, control.circular = list())
circ.lm <- lm.circular(x, x, order=1, level = 0.05, control.circular = list())
circ.lm$p.values
circ.lm$coefficients
circ.lm <- lm.circular(x, x, order=1, level = 0.05, control.circular = list())
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=1, level = 0.05, control.circular = list())
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=2, level = 0.05, control.circular = list())
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=3, level = 0.05, control.circular = list())
circ.lm$p.values
# Obtain a crude plot of the data and fitted regression line.
plot.default(x, y)
#circ.lm$fitted[circ.lm$fitted>pi] <- circ.lm$fitted[circ.lm$fitted>pi] - 2*pi
points.default(x[order(x)], circ.lm$fitted[order(x)], type='l')
data_to_save <- data.frame(Ordered_X = x[order(x)], Fitted_Values = circ.lm$fitted[order(x)])
write.table(data_to_save, file = "exported_data.txt", sep = "\t", row.names = FALSE)
circ.lm <- lm.circular(y, x, order=2, level = 0.05, control.circular = list())
circ.lm$p.values
data_to_save <- data.frame(Ordered_X = x[order(x)], Fitted_Values = circ.lm$fitted[order(x)])
write.table(data_to_save, file = "exported_data.txt", sep = "\t", row.names = FALSE)
circ.lm <- lm.circular(y, x, order=1, level = 0.05, control.circular = list())
circ.lm$p.values
# Specify the file path where the CSV is saved
csv_file_path <- 'independent_angle.csv'
# Read the CSV file with one column and no header
x <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angle.csv'
# Read the CSV file with one column and no header
y <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
circ.lm <- lm.circular(y, x, order=1, level = 0.05, control.circular = list())
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=2, level = 0.05, control.circular = list())
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=3, level = 0.05, control.circular = list())
circ.lm$p.values
data_to_save <- data.frame(Ordered_X = x[order(x)], Fitted_Values = circ.lm$fitted[order(x)])
write.table(data_to_save, file = "exported_data.txt", sep = "\t", row.names = FALSE)
circ.lm$p.values
circ.lm$coefficients
# Specify the file path where the CSV is saved
csv_file_path <- 'independent_angle.csv'
# Read the CSV file with one column and no header
x <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angle.csv'
# Read the CSV file with one column and no header
y <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
circ.lm <- lm.circular(y, x, order=1, level = 0.05, control.circular = list())
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=2, level = 0.05, control.circular = list())
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=3, level = 0.05, control.circular = list())
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=3, level = 0.05, control.circular = list())
circ.lm$coefficients
cor.circular(x, y, test = TRUE)
cor.circular(x, x, test = TRUE)
x <- rvonmises(n=50, mu=circular(0), kappa=3)
y <- x + rvonmises(n=50, mu=circular(pi), kappa=10)
cor.circular(x, y, test=TRUE)
x <- rvonmises(n=50, mu=circular(0), kappa=3)
y <- rvonmises(n=50, mu=circular(pi), kappa=10)
cor.circular(x, y, test=TRUE)
x <- rvonmises(n=50, mu=circular(0), kappa=3)
y <- rvonmises(n=50, mu=circular(0), kappa=3)
cor.circular(x, y, test=TRUE)
# Specify the file path where the CSV is saved
csv_file_path <- 'independent_angle.csv'
# Read the CSV file with one column and no header
x <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angle.csv'
# Read the CSV file with one column and no header
y <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
cor.circular(x, y, test=TRUE)
# Specify the file path where the CSV is saved
csv_file_path <- 'independent_angle.csv'
# Read the CSV file with one column and no header
x <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angle.csv'
# Read the CSV file with one column and no header
y <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
cor.circular(x, y, test=TRUE)
cor.circular(x, y, test=TRUE)
# Specify the file path where the CSV is saved
csv_file_path <- 'independent_angle.csv'
# Read the CSV file with one column and no header
x <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angle.csv'
# Read the CSV file with one column and no header
y <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
cor.circular(x, y, test=TRUE)
# Specify the file path where the CSV is saved
csv_file_path <- 'independent_angle.csv'
# Read the CSV file with one column and no header
x <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angle.csv'
# Read the CSV file with one column and no header
y <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
circ.lm <- lm.circular(y, x, order=1, level = 0.05, control.circular = list())
circ.lm$p.values
circ.lm <- lm.circular(y, x, order=2, level = 0.05, control.circular = list())
circ.lm$p.values
library(circular)
# Specify the file path where the CSV is saved
csv_file_path <- 'independent_angle.csv'
# Read the CSV file with one column and no header
x <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angle.csv'
# Read the CSV file with one column and no header
y <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
circ.lm <- lm.circular(y, x, order=1)
# Specify the file path where the CSV is saved
csv_file_path <- 'independent_angle.csv'
# Read the CSV file with one column and no header
x <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angle.csv'
# Read the CSV file with one column and no header
y <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
circ.lm <- lm.circular(y, x, order=1)
circ.lm$p.values
data_to_save <- data.frame(Ordered_X = x[order(x)], Fitted_Values = circ.lm$fitted[order(x)])
write.table(data_to_save, file = "exported_data.txt", sep = "\t", row.names = FALSE)
circ.lm <- lm.circular(y, x, order=2)
circ.lm$p.values
data_to_save <- data.frame(Ordered_X = x[order(x)], Fitted_Values = circ.lm$fitted[order(x)])
write.table(data_to_save, file = "exported_data.txt", sep = "\t", row.names = FALSE)
# Specify the file path where the CSV is saved
csv_file_path <- 'independent_angle.csv'
# Read the CSV file with one column and no header
x <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angle2.csv'
# Read the CSV file with one column and no header
y2 <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
circ.lm <- lm.circular(y2, x, order=2, level = 0.05, control.circular = list())
circ.lm$p.values
data_to_save <- data.frame(Ordered_X = x[order(x)], Fitted_Values = circ.lm$fitted[order(x)])
write.table(data_to_save, file = "exported_data2.txt", sep = "\t", row.names = FALSE)
cor.circular(x, y)
cor.circular(x,x)
cor.circular(x,y2)
circ.lm$rho
circ.lm <- lm.circular(y, x, order=2, level = 0.05, control.circular = list())
circ.lm$rho
circ.lm$coefficients
circ.lm <- lm.circular(y2, x, order=2, level = 0.05, control.circular = list())
circ.lm$coefficients
circ.lm$p.values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angleR4.csv'
# Read the CSV file with one column and no header
yR4 <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angleR5.csv'
# Read the CSV file with one column and no header
yR5 <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
circ.lm <- lm.circular(y, x, order=1)
circ.lm <- lm.circular(yR4, x, order=1)
# Specify the file path where the CSV is saved
csv_file_path <- 'independent_angle.csv'
# Read the CSV file with one column and no header
x <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
# Specify the file path where the CSV is saved
csv_file_path <- 'dependent_angle.csv'
# Read the CSV file with one column and no header
y <- read.csv(csv_file_path, header = FALSE, col.names = c("Values"))$Values
circ.lm <- lm.circular(yR4, x, order=1)
circ.lm$coefficients
circ.lm$p.values
cor.circular(x, yR4)
cor.circular(x, yR5)
cor.circular(x, y)
circ.lm <- lm.circular(yR5, x, order=1)
circ.lm$p.values
circ.lm$coefficients
circ.lm <- lm.circular(y, x, order=1)
circ.lm$p.values
circ.lm$coefficients
circ.lm <- lm.circular(y, x, order=2)
circ.lm$coefficients
circ.lm$p.values
